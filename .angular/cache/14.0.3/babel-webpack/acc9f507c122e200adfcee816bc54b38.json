{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/User/Desktop/angular-canvasjs-chart-samples/angular-canvasjs-chart-samples/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@canvasjs/angular-stockcharts\";\n\nconst _c0 = function () {\n  return {\n    width: \"100%\",\n    height: \"360px\"\n  };\n};\n\nexport class ZoomableChartComponent {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.chartOptions = {\n      zoomEnabled: true,\n      animationEnabled: true,\n      exportEnabled: true,\n      theme: 'light2',\n      title: {\n        text: 'Try Zooming & Panning'\n      },\n      data: [{\n        type: 'line',\n        dataPoints: [] // Initialize with an empty array\n\n      }]\n    };\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.fetchChartData();\n    })();\n  }\n\n  fetchChartData() {\n    // Replace 'https://localhost:7054/Ram' with your actual API endpoint\n    this.httpClient.get('https://localhost:7054/Ram').subscribe(response => {\n      // Process the API response and calculate the average by hour\n      const groupedData = {};\n      response.forEach(item => {\n        const date = new Date(item.Date);\n        const hour = date.getHours();\n        const key = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()} ${hour}:00:00`;\n\n        if (!groupedData[key]) {\n          groupedData[key] = {\n            totalSize: 0,\n            count: 0\n          };\n        }\n\n        groupedData[key].totalSize += item.Size;\n        groupedData[key].count++;\n      });\n      const dataPoints = Object.keys(groupedData).map(key => {\n        const averageSize = groupedData[key].totalSize / groupedData[key].count;\n        return {\n          y: averageSize,\n          x: new Date(key).getTime() // x-axis as a timestamp\n\n        };\n      }); // Sort dataPoints by x value (timestamp)\n\n      dataPoints.sort((a, b) => a.x - b.x); // Assign the data points to the chartOptions\n\n      this.chartOptions.data[0].dataPoints = dataPoints; // Update the chart\n\n      this.updateChart();\n    });\n  }\n\n  updateChart() {// If you are using CanvasJS, you might have a reference to the chart object\n    // You can update the chart using that reference, for example:\n    // const chart = new CanvasJS.Chart(\"chartContainer\", this.chartOptions);\n    // chart.render();\n    // If you are using a different charting library, use the appropriate method to update the chart.\n  }\n\n}\n\nZoomableChartComponent.ɵfac = function ZoomableChartComponent_Factory(t) {\n  return new (t || ZoomableChartComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\n\nZoomableChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ZoomableChartComponent,\n  selectors: [[\"app-zoom-pan\"]],\n  decls: 2,\n  vars: 3,\n  consts: [[3, \"options\", \"styles\"]],\n  template: function ZoomableChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"canvasjs-chart\", 0);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"options\", ctx.chartOptions)(\"styles\", i0.ɵɵpureFunction0(2, _c0));\n    }\n  },\n  dependencies: [i2.CanvasJSChart],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;;;;;;;AAOA,OAAM,MAAOA,sBAAP,CAA6B;EAC/BC,YAAoBC,UAApB,EAA0C;IAAtB;IAMpB,oBAAe;MACXC,WAAW,EAAE,IADF;MAEXC,gBAAgB,EAAE,IAFP;MAGXC,aAAa,EAAE,IAHJ;MAIXC,KAAK,EAAE,QAJI;MAKXC,KAAK,EAAE;QACHC,IAAI,EAAE;MADH,CALI;MAQXC,IAAI,EAAE,CACF;QACIC,IAAI,EAAE,MADV;QAEIC,UAAU,EAAE,EAFhB,CAEoB;;MAFpB,CADE;IARK,CAAf;EAN8C;;EAExCC,QAAQ;IAAA;;IAAA;MACV,KAAI,CAACC,cAAL;IADU;EAEb;;EAkBDA,cAAc;IACV;IACA,KAAKX,UAAL,CAAgBY,GAAhB,CAAoB,4BAApB,EAAkDC,SAAlD,CAA6DC,QAAD,IAAkB;MAC1E;MACA,MAAMC,WAAW,GAAG,EAApB;MACAD,QAAQ,CAACE,OAAT,CAAkBC,IAAD,IAAc;QAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,IAAI,CAACE,IAAd,CAAb;QACA,MAAMC,IAAI,GAAGF,IAAI,CAACG,QAAL,EAAb;QACA,MAAMC,GAAG,GAAG,GAAGJ,IAAI,CAACK,WAAL,EAAkB,IAAIL,IAAI,CAACM,QAAL,KAAkB,CAAC,IAAIN,IAAI,CAACO,OAAL,EAAc,IAAIL,IAAI,QAAlF;;QAEA,IAAI,CAACL,WAAW,CAACO,GAAD,CAAhB,EAAuB;UACnBP,WAAW,CAACO,GAAD,CAAX,GAAmB;YAAEI,SAAS,EAAE,CAAb;YAAgBC,KAAK,EAAE;UAAvB,CAAnB;QACH;;QAEDZ,WAAW,CAACO,GAAD,CAAX,CAAiBI,SAAjB,IAA8BT,IAAI,CAACW,IAAnC;QACAb,WAAW,CAACO,GAAD,CAAX,CAAiBK,KAAjB;MACH,CAXD;MAaA,MAAMlB,UAAU,GAAGoB,MAAM,CAACC,IAAP,CAAYf,WAAZ,EAAyBgB,GAAzB,CAA8BT,GAAD,IAAQ;QACpD,MAAMU,WAAW,GAAGjB,WAAW,CAACO,GAAD,CAAX,CAAiBI,SAAjB,GAA6BX,WAAW,CAACO,GAAD,CAAX,CAAiBK,KAAlE;QACA,OAAO;UACHM,CAAC,EAAED,WADA;UAEHE,CAAC,EAAE,IAAIf,IAAJ,CAASG,GAAT,EAAca,OAAd,EAFA,CAEyB;;QAFzB,CAAP;MAIH,CANkB,CAAnB,CAhB0E,CAwB1E;;MACA1B,UAAU,CAAC2B,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACH,CAAF,GAAMI,CAAC,CAACJ,CAAlC,EAzB0E,CA2B1E;;MACA,KAAKK,YAAL,CAAkBhC,IAAlB,CAAuB,CAAvB,EAA0BE,UAA1B,GAAuCA,UAAvC,CA5B0E,CA8B1E;;MACA,KAAK+B,WAAL;IACH,CAhCD;EAiCH;;EAEDA,WAAW,IACP;IACA;IACA;IACA;IAEA;EACH;;AAnE8B;;;mBAAtB1C,wBAAsB2C;AAAA;;;QAAtB3C;EAAsB4C;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCPnCL;MACCA;MACDA;;;;MADiBA;MAAAA,2CAAwB,QAAxB,EAAwBA,0BAAxB","names":["ZoomableChartComponent","constructor","httpClient","zoomEnabled","animationEnabled","exportEnabled","theme","title","text","data","type","dataPoints","ngOnInit","fetchChartData","get","subscribe","response","groupedData","forEach","item","date","Date","hour","getHours","key","getFullYear","getMonth","getDate","totalSize","count","Size","Object","keys","map","averageSize","y","x","getTime","sort","a","b","chartOptions","updateChart","i0","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\angular-canvasjs-chart-samples\\angular-canvasjs-chart-samples\\src\\app\\components\\key-features\\zoompan.chart.component.ts","C:\\Users\\User\\Desktop\\angular-canvasjs-chart-samples\\angular-canvasjs-chart-samples\\src\\app\\components\\key-features\\chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n    selector: 'app-zoom-pan',\n    templateUrl: 'chart.component.html',\n})\nexport class ZoomableChartComponent implements OnInit {\n    constructor(private httpClient: HttpClient) {}\n\n    async ngOnInit() {\n        this.fetchChartData();\n    }\n\n    chartOptions = {\n        zoomEnabled: true,\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: 'light2',\n        title: {\n            text: 'Try Zooming & Panning',\n        },\n        data: [\n            {\n                type: 'line',\n                dataPoints: [], // Initialize with an empty array\n            },\n        ],\n    };\n\n    fetchChartData() {\n        // Replace 'https://localhost:7054/Ram' with your actual API endpoint\n        this.httpClient.get('https://localhost:7054/Ram').subscribe((response: any) => {\n            // Process the API response and calculate the average by hour\n            const groupedData = {};\n            response.forEach((item: any) => {\n                const date = new Date(item.Date);\n                const hour = date.getHours();\n                const key = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()} ${hour}:00:00`;\n\n                if (!groupedData[key]) {\n                    groupedData[key] = { totalSize: 0, count: 0 };\n                }\n\n                groupedData[key].totalSize += item.Size;\n                groupedData[key].count++;\n            });\n\n            const dataPoints = Object.keys(groupedData).map((key) => {\n                const averageSize = groupedData[key].totalSize / groupedData[key].count;\n                return {\n                    y: averageSize,\n                    x: new Date(key).getTime(), // x-axis as a timestamp\n                };\n            });\n\n            // Sort dataPoints by x value (timestamp)\n            dataPoints.sort((a, b) => a.x - b.x);\n\n            // Assign the data points to the chartOptions\n            this.chartOptions.data[0].dataPoints = dataPoints;\n\n            // Update the chart\n            this.updateChart();\n        });\n    }\n\n    updateChart() {\n        // If you are using CanvasJS, you might have a reference to the chart object\n        // You can update the chart using that reference, for example:\n        // const chart = new CanvasJS.Chart(\"chartContainer\", this.chartOptions);\n        // chart.render();\n\n        // If you are using a different charting library, use the appropriate method to update the chart.\n    }\n}\n","<div>\r\n\t<canvasjs-chart [options]=\"chartOptions\" [styles]=\"{width: '100%', height:'360px'}\"></canvasjs-chart>\r\n</div>"]},"metadata":{},"sourceType":"module"}